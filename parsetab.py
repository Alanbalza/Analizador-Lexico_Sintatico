
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDECOMMA DIVIDE DOT EQUAL FOR GE GT ID INT LBRACE LE LPAREN LT MINUS NUMBER PLUS RBRACE RPAREN SEMICOLON STRING TIMESprogram : statementsstatements : statement\n                  | statement statementsstatement : for_statement\n                 | expression SEMICOLON\n                 | function_call SEMICOLONfor_statement : FOR LPAREN declaration SEMICOLON expression SEMICOLON assignment RPAREN LBRACE statements RBRACEdeclaration : INT ID EQUAL expressionassignment : ID EQUAL expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression LE expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression GT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDexpression : STRINGfunction_call : ID DOT ID LPAREN RPAREN'
    
_lr_action_items = {'FOR':([0,3,4,13,22,51,54,],[7,7,-4,-5,-6,7,-7,]),'LPAREN':([0,3,4,7,8,13,14,15,16,17,18,19,20,21,22,38,39,43,50,51,54,],[8,8,-4,23,8,-5,8,8,8,8,8,8,8,8,-6,41,8,8,8,8,-7,]),'NUMBER':([0,3,4,8,13,14,15,16,17,18,19,20,21,22,39,43,50,51,54,],[9,9,-4,9,-5,9,9,9,9,9,9,9,9,-6,9,9,9,9,-7,]),'ID':([0,3,4,8,13,14,15,16,17,18,19,20,21,22,26,36,39,43,45,50,51,54,],[10,10,-4,25,-5,25,25,25,25,25,25,25,25,-6,38,40,25,25,48,25,10,-7,]),'STRING':([0,3,4,8,13,14,15,16,17,18,19,20,21,22,39,43,50,51,54,],[11,11,-4,11,-5,11,11,11,11,11,11,11,11,-6,11,11,11,11,-7,]),'$end':([1,2,3,4,12,13,22,54,],[0,-1,-2,-4,-3,-5,-6,-7,]),'RBRACE':([3,4,12,13,22,53,54,],[-2,-4,-3,-5,-6,54,-7,]),'SEMICOLON':([5,6,9,10,11,25,27,28,29,30,31,32,33,34,35,37,42,44,46,],[13,22,-19,-20,-21,-20,-10,-11,-12,-13,-14,-15,-16,-17,39,-18,45,-22,-8,]),'PLUS':([5,9,10,11,24,25,27,28,29,30,31,32,33,34,37,42,46,52,],[14,-19,-20,-21,14,-20,-10,-11,-12,-13,14,14,14,14,-18,14,14,14,]),'MINUS':([5,9,10,11,24,25,27,28,29,30,31,32,33,34,37,42,46,52,],[15,-19,-20,-21,15,-20,-10,-11,-12,-13,15,15,15,15,-18,15,15,15,]),'TIMES':([5,9,10,11,24,25,27,28,29,30,31,32,33,34,37,42,46,52,],[16,-19,-20,-21,16,-20,16,16,-12,-13,16,16,16,16,-18,16,16,16,]),'DIVIDE':([5,9,10,11,24,25,27,28,29,30,31,32,33,34,37,42,46,52,],[17,-19,-20,-21,17,-20,17,17,-12,-13,17,17,17,17,-18,17,17,17,]),'LE':([5,9,10,11,24,25,27,28,29,30,31,32,33,34,37,42,46,52,],[18,-19,-20,-21,18,-20,-10,-11,-12,-13,18,18,18,18,-18,18,18,18,]),'LT':([5,9,10,11,24,25,27,28,29,30,31,32,33,34,37,42,46,52,],[19,-19,-20,-21,19,-20,-10,-11,-12,-13,19,19,19,19,-18,19,19,19,]),'GE':([5,9,10,11,24,25,27,28,29,30,31,32,33,34,37,42,46,52,],[20,-19,-20,-21,20,-20,-10,-11,-12,-13,20,20,20,20,-18,20,20,20,]),'GT':([5,9,10,11,24,25,27,28,29,30,31,32,33,34,37,42,46,52,],[21,-19,-20,-21,21,-20,-10,-11,-12,-13,21,21,21,21,-18,21,21,21,]),'RPAREN':([9,11,24,25,27,28,29,30,31,32,33,34,37,41,47,52,],[-19,-21,37,-20,-10,-11,-12,-13,-14,-15,-16,-17,-18,44,49,-9,]),'DOT':([10,],[26,]),'INT':([23,],[36,]),'EQUAL':([40,48,],[43,50,]),'LBRACE':([49,],[51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,51,],[2,12,53,]),'statement':([0,3,51,],[3,3,3,]),'for_statement':([0,3,51,],[4,4,4,]),'expression':([0,3,8,14,15,16,17,18,19,20,21,39,43,50,51,],[5,5,24,27,28,29,30,31,32,33,34,42,46,52,5,]),'function_call':([0,3,51,],[6,6,6,]),'declaration':([23,],[35,]),'assignment':([45,],[47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','syntax_analyzer.py',12),
  ('statements -> statement','statements',1,'p_statements','syntax_analyzer.py',16),
  ('statements -> statement statements','statements',2,'p_statements','syntax_analyzer.py',17),
  ('statement -> for_statement','statement',1,'p_statement','syntax_analyzer.py',24),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','syntax_analyzer.py',25),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','syntax_analyzer.py',26),
  ('for_statement -> FOR LPAREN declaration SEMICOLON expression SEMICOLON assignment RPAREN LBRACE statements RBRACE','for_statement',11,'p_for_statement','syntax_analyzer.py',30),
  ('declaration -> INT ID EQUAL expression','declaration',4,'p_declaration','syntax_analyzer.py',34),
  ('assignment -> ID EQUAL expression','assignment',3,'p_assignment','syntax_analyzer.py',38),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','syntax_analyzer.py',42),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','syntax_analyzer.py',43),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','syntax_analyzer.py',44),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','syntax_analyzer.py',45),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','syntax_analyzer.py',46),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','syntax_analyzer.py',47),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','syntax_analyzer.py',48),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','syntax_analyzer.py',49),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','syntax_analyzer.py',53),
  ('expression -> NUMBER','expression',1,'p_expression_number','syntax_analyzer.py',57),
  ('expression -> ID','expression',1,'p_expression_id','syntax_analyzer.py',61),
  ('expression -> STRING','expression',1,'p_expression_string','syntax_analyzer.py',65),
  ('function_call -> ID DOT ID LPAREN RPAREN','function_call',5,'p_function_call','syntax_analyzer.py',69),
]
